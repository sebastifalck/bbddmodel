DELETE FROM microservice_environment_properties;
DELETE FROM microservice_properties;
DELETE FROM app_directory;
DELETE FROM environment_directory;
DELETE FROM labelocp_directory;
DELETE FROM image_directory;
DELETE FROM path_directory;
DELETE FROM usage_directory;
DELETE FROM environment_type;
DELETE FROM namespace_directory;
DELETE FROM person_in_charge;
DELETE FROM project_type;
DELETE FROM project_directory;
DELETE FROM country_directory;


-- Primero truncar tablas m치s dependientes
TRUNCATE TABLE microservice_environment_properties;
TRUNCATE TABLE microservice_properties;
TRUNCATE TABLE app_directory;

-- Luego tablas intermedias (menos dependientes)
TRUNCATE TABLE namespace_directory;
TRUNCATE TABLE environment_type;
TRUNCATE TABLE usage_directory;
TRUNCATE TABLE path_directory;
TRUNCATE TABLE image_directory;
TRUNCATE TABLE labelocp_directory;
TRUNCATE TABLE environment_directory;

-- Finalmente tablas maestras (sin dependencias de clave externa hacia ellas)
TRUNCATE TABLE country_directory;
TRUNCATE TABLE project_directory;
TRUNCATE TABLE project_type;
TRUNCATE TABLE person_in_charge;


-- Paso 1: Borrar datos desde tablas m치s dependientes
DELETE FROM microservice_environment_properties;
DELETE FROM microservice_properties;
DELETE FROM app_directory;

DELETE FROM namespace_directory;
DELETE FROM environment_type;
DELETE FROM usage_directory;
DELETE FROM path_directory;
DELETE FROM image_directory;
DELETE FROM labelocp_directory;
DELETE FROM environment_directory;

DELETE FROM country_directory;
DELETE FROM project_directory;
DELETE FROM project_type;
DELETE FROM person_in_charge;

-- Paso 2: Reiniciar IDs (IDENTITY)
DBCC CHECKIDENT ('microservice_environment_properties', RESEED, 0);
DBCC CHECKIDENT ('microservice_properties', RESEED, 0);
DBCC CHECKIDENT ('app_directory', RESEED, 0);
DBCC CHECKIDENT ('namespace_directory', RESEED, 0);
DBCC CHECKIDENT ('environment_type', RESEED, 0);
DBCC CHECKIDENT ('usage_directory', RESEED, 0);
DBCC CHECKIDENT ('path_directory', RESEED, 0);
DBCC CHECKIDENT ('image_directory', RESEED, 0);
DBCC CHECKIDENT ('labelocp_directory', RESEED, 0);
DBCC CHECKIDENT ('environment_directory', RESEED, 0);
DBCC CHECKIDENT ('country_directory', RESEED, 0);
DBCC CHECKIDENT ('project_directory', RESEED, 0);
DBCC CHECKIDENT ('project_type', RESEED, 0);
DBCC CHECKIDENT ('person_in_charge', RESEED, 0);




-- Tablas independientes
CREATE TABLE person_in_charge (
    id INT IDENTITY(1,1) PRIMARY KEY,
    nombre VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE project_type (
    id INT IDENTITY(1,1) PRIMARY KEY,
    project_type VARCHAR(100)
);

CREATE TABLE project_directory (
    id INT IDENTITY(1,1) PRIMARY KEY,
    project_name VARCHAR(100) NOT NULL
);

CREATE TABLE country_directory (
    id INT IDENTITY(1,1) PRIMARY KEY,
    country VARCHAR(100)
);

CREATE TABLE environment_type (
    id INT IDENTITY(1,1) PRIMARY KEY,
    environment_type VARCHAR(100)
);

CREATE TABLE labelocp_directory (
    id INT IDENTITY(1,1) PRIMARY KEY,
    ocplabel VARCHAR(100) NOT NULL
);

CREATE TABLE image_directory (
    id INT IDENTITY(1,1) PRIMARY KEY,
    image_name VARCHAR(100) NOT NULL
);

CREATE TABLE path_directory (
    id INT IDENTITY(1,1) PRIMARY KEY,
    path_name VARCHAR(100) NOT NULL
);

CREATE TABLE usage_directory (
    id INT IDENTITY(1,1) PRIMARY KEY,
    usage VARCHAR(100) NOT NULL
);

CREATE TABLE namespace_directory (
    id INT IDENTITY(1,1) PRIMARY KEY,
    namespace_name VARCHAR(100),
    token TEXT
);

-- Crear primero microservice_properties y was_properties
CREATE TABLE microservice_properties (
    id INT IDENTITY(1,1) PRIMARY KEY,
    id_appname UNIQUEIDENTIFIER, -- Ser치 FK luego
    id_environment INT REFERENCES environment_type(id),
    unit_tests BIT DEFAULT 1,
    sonarqube BIT DEFAULT 1,
    security_gate BIT DEFAULT 1,
    id_usage INT REFERENCES usage_directory(id),
    id_namespace INT REFERENCES namespace_directory(id),
    cpu_limits VARCHAR(100),
    cpu_request VARCHAR(100),
    memory_limits VARCHAR(100),
    memory_request VARCHAR(100),
    id_label INT REFERENCES labelocp_directory(id),
    id_image INT REFERENCES image_directory(id),
    id_path INT REFERENCES path_directory(id),
    configmap BIT DEFAULT 0,
    secrets BIT DEFAULT 0,
    volume BIT DEFAULT 0,
    sonar_exclusions VARCHAR(100),
    runtimeversion VARCHAR(100),
    nodeversion VARCHAR(100)
);

CREATE TABLE was_properties (
    id INT IDENTITY(1,1) PRIMARY KEY,
    id_appname UNIQUEIDENTIFIER, -- Ser치 FK luego
    ip_number VARCHAR(100) NOT NULL,
    port_number INT
);

-- Finalmente la tabla que referencia a las anteriores
CREATE TABLE app_directory (
    id UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
    id_personincharge INT REFERENCES person_in_charge(id),
    appname VARCHAR(100) NOT NULL,
    id_project_type INT REFERENCES project_type(id),
    id_project INT REFERENCES project_directory(id),
    id_country INT REFERENCES country_directory(id),
    repositorio VARCHAR(100) NOT NULL,
    url_repositorio VARCHAR(255) NOT NULL,
    id_microservice_properties INT REFERENCES microservice_properties(id),
    id_was_properties INT REFERENCES was_properties(id)
);




DECLARE @appname VARCHAR(100) = 'ShopEase';
DECLARE @ambiente VARCHAR(100) = 'Dev';

SELECT
    ad.appname,
    ed.environment,
    pic.nombre AS responsable,
    pic.email AS email_responsable,
    pt.project_type,
    pd.project_name,
    cd.country,
    ad.repositorio,
    ad.url_repositorio,
    mp.configmap,
    mp.secrets,
    mp.volume,
    mp.sonar_exclusions,
    mp.runtimeversion,
    mp.nodeversion,
    ld.ocplabel,
    id.image_name,
    pad.path_name,
    mep.unit_tests,
    mep.sonarqube,
    mep.security_gate,
    ud.usage,
    ns.namespace_name,
    ns.token,
    mep.cpu_limits,
    mep.cpu_request,
    mep.memory_limits,
    mep.memory_request
FROM app_directory ad
INNER JOIN person_in_charge pic ON ad.id_personincharge = pic.id
INNER JOIN project_type pt ON ad.id_project_type = pt.id
INNER JOIN project_directory pd ON ad.id_project = pd.id
INNER JOIN country_directory cd ON ad.id_country = cd.id
INNER JOIN microservice_properties mp ON mp.id = (
    SELECT TOP 1 mep.id_properties
    FROM microservice_environment_properties mep
    INNER JOIN environment_type et ON mep.id_environment = et.id
    WHERE et.environment_type = @ambiente
)
INNER JOIN microservice_environment_properties mep ON mep.id_properties = mp.id
INNER JOIN environment_type et ON mep.id_environment = et.id
INNER JOIN labelocp_directory ld ON mp.id_label = ld.id
INNER JOIN image_directory id ON mp.id_image = id.id
INNER JOIN path_directory pad ON mp.id_path = pad.id
INNER JOIN usage_directory ud ON mep.id_usage = ud.id
INNER JOIN namespace_directory ns ON mep.id_namespace = ns.id
INNER JOIN environment_directory ed ON ed.environment = et.environment_type
WHERE ad.appname = @appname
AND et.environment_type = @ambiente;







/*
DROP TABLE 
DROP TABLE    microservice_environment_properties
DROP TABLE    microservice_properties
DROP TABLE    app_directory
DROP TABLE    namespace_directory
DROP TABLE environment_type
    usage_directory
    path_directory
    image_directory
    labelocp_directory
    DROP TABLE country_directory
    DROP TABLE project_directory
    DROP TABLE project_directory
    DROP TABLE project_type
    DROP TABLE person_in_charge


DROP TABLE environment_directory
*/
