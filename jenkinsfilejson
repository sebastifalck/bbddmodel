pipeline {
    agent any

    parameters {
        string(name: 'APP_ID', defaultValue: '', description: 'ID de la aplicación a consultar (INT)')
    }

    environment {
        DB_USER = 'almDevopsAdmin'
        DB_NAME = 'almdevops'
        DB_HOST = 'localhost'
        OUTPUT_FILE = 'app_properties_output.json'
    }

    stages {
        stage('Detectar tipo de aplicación') {
            steps {
                script {
                    def tipoApp = sh(
                        script: '''
                            psql -U $DB_USER -h $DB_HOST -d $DB_NAME -t -c "
                                SELECT
                                    CASE
                                        WHEN id_microservice_directory IS NOT NULL THEN 'microservice'
                                        WHEN id_was_properties_directory IS NOT NULL THEN 'was'
                                        WHEN id_pims_properties_directory IS NOT NULL THEN 'pims'
                                        WHEN id_database_properties_directory IS NOT NULL THEN 'ddbb'
                                        WHEN id_datastage_properties_directory IS NOT NULL THEN 'datastage'
                                        ELSE 'desconocido'
                                    END AS app_type
                                FROM app_general_properties
                                WHERE id = ''' + params.APP_ID + '''
                            "
                        ''',
                        returnStdout: true
                    ).trim()
                    echo "Tipo de aplicación detectado: ${tipoApp}"
                    env.APP_TYPE = tipoApp
                }
            }
        }

        stage('Exportar a JSON') {
            steps {
                script {
                    def functionQuery = ""

                    if (env.APP_TYPE == "microservice") {
                        functionQuery = "SELECT row_to_json(t) FROM (SELECT * FROM get_microservice_app_properties(${params.APP_ID})) t"
                    } else if (env.APP_TYPE == "was") {
                        functionQuery = "SELECT row_to_json(t) FROM (SELECT * FROM get_was_app_properties(${params.APP_ID})) t"
                    } else if (env.APP_TYPE == "pims") {
                        functionQuery = "SELECT row_to_json(t) FROM (SELECT * FROM get_pims_app_properties(${params.APP_ID})) t"
                    } else if (env.APP_TYPE == "ddbb") {
                        functionQuery = "SELECT row_to_json(t) FROM (SELECT * FROM get_database_app_properties(${params.APP_ID})) t"
                    } else if (env.APP_TYPE == "datastage") {
                        functionQuery = "SELECT row_to_json(t) FROM (SELECT * FROM get_datastage_app_properties(${params.APP_ID})) t"
                    } else {
                        error "Tipo de aplicación no soportado o ID inválido."
                    }

                    // Aquí se concatena la variable, así Groovy NO intenta interpolar $ del shell
                    sh 'psql -U $DB_USER -h $DB_HOST -d $DB_NAME -t -c "' + functionQuery + '" | grep -v "^$" | sed "s/^ *//" | sed "s/,$//" > raw_app.json'

                    // Usando comillas dobles para Groovy, pero simple para shell y así evitas el problema
                    sh """
                        jq --arg id "${params.APP_ID}" '{(\$id): [.]}' raw_app.json > ${env.OUTPUT_FILE}
                    """
                    echo "JSON generado: ${env.OUTPUT_FILE}"
                }
            }
        }

        stage('Imprimir JSON') {
            steps {
                script {
                    def jsonContent = readFile("${env.OUTPUT_FILE}")
                    echo "Contenido del JSON generado:\n${jsonContent}"
                }
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: "${env.OUTPUT_FILE}", fingerprint: true
        }
    }
}
