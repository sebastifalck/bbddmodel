pipeline {
    agent any

    environment {
        DB_USER = 'almDevopsAdmin'
        DB_NAME = 'almdevops'
        DB_HOST = 'localhost'
        OUTPUT_FILE = 'app_properties_output.json'
    }

    stages {
        stage('Exportar todo a JSON') {
            steps {
                script {
                    // Consulta para todos los registros, el resultado serÃ¡ una lista de pares (id, json_obj)
                    def functionQuery = """
                        SELECT
                            agp.id,
                            CASE
                                WHEN agp.id_microservice_directory IS NOT NULL THEN row_to_json(t1)
                                WHEN agp.id_was_properties_directory IS NOT NULL THEN row_to_json(t2)
                                WHEN agp.id_pims_properties_directory IS NOT NULL THEN row_to_json(t3)
                                WHEN agp.id_database_properties_directory IS NOT NULL THEN row_to_json(t4)
                                WHEN agp.id_datastage_properties_directory IS NOT NULL THEN row_to_json(t5)
                                ELSE NULL
                            END AS json_obj
                        FROM app_general_properties agp
                        LEFT JOIN get_microservice_app_properties(agp.id) t1 ON agp.id_microservice_directory IS NOT NULL
                        LEFT JOIN get_was_app_properties(agp.id) t2 ON agp.id_was_properties_directory IS NOT NULL
                        LEFT JOIN get_pims_app_properties(agp.id) t3 ON agp.id_pims_properties_directory IS NOT NULL
                        LEFT JOIN get_database_app_properties(agp.id) t4 ON agp.id_database_properties_directory IS NOT NULL
                        LEFT JOIN get_datastage_app_properties(agp.id) t5 ON agp.id_datastage_properties_directory IS NOT NULL
                        WHERE
                            agp.id_microservice_directory IS NOT NULL
                            OR agp.id_was_properties_directory IS NOT NULL
                            OR agp.id_pims_properties_directory IS NOT NULL
                            OR agp.id_database_properties_directory IS NOT NULL
                            OR agp.id_datastage_properties_directory IS NOT NULL
                    """

                    // Exporta el resultado a un archivo
                    sh """
                        psql -U $DB_USER -h $DB_HOST -d $DB_NAME -t -A -F ',' -c "${functionQuery}" > raw_output.csv
                    """
                }
            }
        }

        stage('Armar JSON final') {
            steps {
                script {
                    // Lee el archivo y lo convierte en el formato JSON pedido
                    def lines = readFile('raw_output.csv').readLines().findAll { it }
                    def result = [:]
                    for (line in lines) {
                        def parts = line.split(',', 2)
                        def id = parts[0].trim()
                        def jsonObjStr = parts[1].trim()
                        if (jsonObjStr && jsonObjStr != "NULL") {
                            def jsonObj = readJSON text: jsonObjStr
                            result[id] = [jsonObj]
                        }
                    }
                    // Escribe el archivo final
                    writeJSON file: "${env.OUTPUT_FILE}", json: result, pretty: 4
                    echo "JSON generado: ${env.OUTPUT_FILE}"
                }
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: "${env.OUTPUT_FILE}", fingerprint: true
        }
    }
}
